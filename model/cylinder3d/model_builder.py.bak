from models.cylinder3d.cylinder_spconv_3d import get_model_class
from models.cylinder3d.segmentator_3d_asymm_spconv import Asymm_3d_spconv
from models.cylinder3d.cylinder_fea_generator import cylinder_fea

class Cylinder3D(nn.Module):
    def __init__(self, inchs=1, num_classes=8, midchs=32):
        super(Cylinder3D, self).__init__()
        
        self.name = "Cylinder3D"
        
        self.output_shape = [48, 360, 32] # model_config['output_shape']
        self.num_class = num_classes # kitti classes
        self.num_input_features = 16 #model_config['num_input_features']
        self.use_norm = True #model_config['use_norm']
        self.init_size = 32 #model_config['init_size']
        self.fea_dim = 9 #model_config['fea_dim']
        self.out_fea_dim = 256 #model_config['out_fea_dim']
        
        cylinder_3d_spconv_seg = Asymm_3d_spconv(
            output_shape=output_shape,
            use_norm=use_norm,
            num_input_features=num_input_features,
            init_size=init_size,
            nclasses=num_class)
            
        cy_fea_net = cylinder_fea(grid_size=output_shape,
                      fea_dim=fea_dim,
                      out_pt_fea_dim=out_fea_dim,
                      fea_compre=num_input_features)
        
        model = get_model_class(model_config["model_architecture"])(
            cylin_model=cy_fea_net,
            segmentator_spconv=cylinder_3d_spconv_seg,
            sparse_shape=output_shape)

    def forward(self, x):



        return model
